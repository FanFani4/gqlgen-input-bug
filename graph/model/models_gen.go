// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type UserRole string

const (
	UserRoleUser           UserRole = "USER"
	UserRoleModerator      UserRole = "MODERATOR"
	UserRoleSuperModerator UserRole = "SUPER_MODERATOR"
	UserRoleAdministrator  UserRole = "ADMINISTRATOR"
)

var AllUserRole = []UserRole{
	UserRoleUser,
	UserRoleModerator,
	UserRoleSuperModerator,
	UserRoleAdministrator,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleUser, UserRoleModerator, UserRoleSuperModerator, UserRoleAdministrator:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
